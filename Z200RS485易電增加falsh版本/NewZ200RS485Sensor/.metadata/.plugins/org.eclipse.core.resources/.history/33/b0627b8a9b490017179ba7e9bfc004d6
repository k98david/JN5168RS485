/*
 * Qsensor.c
 *
 *  Created on: 2017/5/25
 *      Author: K98David
 */

/*
 * QSensor.c
 *
 *  Created on: 2017/1/16
 *      Author: K98David
 */


#include <jendefs.h>
#include <AppHardwareApi.h>
#include "Qsensor.h"
#include <string.h>
#include "QApp.h"
#include "config.h"
#include "wuart.h"
#include "uart.h"
//#include "QUtils.h"

SensorLog_t sensorList[MaxSensorNumber];
SensorLog_t sensorList_Test[MaxSensorNumber];
static uint8_t lastsensor_num=0;
SensorMode_t sensor_mode=DisableMode_c;
uint8 EEPROMDataLength=64;
uint8 totalSegment=0;
uint8_t send_RF_Data_Count=0;
uint8_t sensor_RF_Packet_len=0;
uint8_t sensorType_Count=0;
//uint8_t rF_Immediate_Count=0;
uint8_t rF_Log_Count=0;
uint8_t rF_Log_len=0;
uint8_t OldsensorType_Count=0;
bool rF_Log_Flag=FALSE;
SensorOldIndex_t OldsensorData_Count[MaxSensorNumber];
static uint8_t gCurrentSensorCMDIndex=0;
static uint8_t gCurrentSensorNUMIndex=0;

void readEEpromSensor(void);
void calc_crc(unsigned char *buf,int len);
void printCmd(uint8 * msg,uint8 len);
uint8_t check_Empty(SensorLog_t *sensorTemp);
uint8_t check_HaveData(SensorLog_t *sensorTemp);

uint8_t getSensorCMD(char *sData);
uint8_t getSensorNumber(void);
uint8 sensor_RF_Packet[100]={0};
char *Temp;
uint8_t Len;

uint8_t processSensorE(char * cmdStr){
	char * sName;
	char * sAddress;
	char  sAddressH;
	char  sAddressL;
    uint8_t x=0;
    uint8_t y=0;
    uint8_t outTemp[63]={0};

/*
	lastsensor_num=check_Empty(&sensorList[0]);
	DBG_vPrintf(1, "lastsensor_num %x \r\n", lastsensor_num);
	if(lastsensor_num!=0xff){
		Temp = strtok(cmdStr, ",");
		DBG_vPrintf(1, "Temp1 %s\r\n", Temp);
		sensorList[lastsensor_num].info.sensorType=convertASCII2Hex(Temp);
		Temp = strtok(NULL, ",");
		DBG_vPrintf(1, "Temp2 %s\r\n", Temp);
		sensorList[lastsensor_num].info.sensorAddress=convertASCII2Hex(Temp);
		while(Temp!=NULL){
		    Temp = strtok(NULL, ",");
			DBG_vPrintf(1, "Temp3 %s\r\n", Temp);
		    Len=strlen(Temp);
		    if(Len==4){
		        break;
		    }
			DBG_vPrintf(1, "Len %x\r\n", Len);
		    for(x=0;x<=Len;x+=2){
		    	sensorList[lastsensor_num].info.sensorCmdNum[sensorList[lastsensor_num].info.CmdCount].sensorCmd[y++]=convertASCII2Hex(Temp+x);
		    }

		    sensorList[lastsensor_num].info.CmdCount++;
			calc_crc(sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd,6);

			DBG_vPrintf(1, "sensorList CMD\r\n");
			for(y=0;y<8;y++){
				DBG_vPrintf(1, "%x", sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[y]);
			}
			sensorList[lastsensor_num].info.Enable=1;
			sensorList[lastsensor_num].info.mask=0x88;
			sensor_mode=EnableMode_c;
		}
	}
	DBG_vPrintf(1, "sensorList Count%x\r\n", sensorList[lastsensor_num].info.CmdCount);
	DBG_vPrintf(1, "sensorList mask%x\r\n", sensorList[lastsensor_num].info.mask);
	DBG_vPrintf(1, "sensorList Type%x\r\n", sensorList[lastsensor_num].info.sensorType);
	DBG_vPrintf(1, "sensorList Enable%x\r\n", sensorList[lastsensor_num].info.Enable);
	DBG_vPrintf(1, "sensorList Address%x\r\n", sensorList[lastsensor_num].info.sensorAddress);

	DBG_vPrintf(1, "sensorList CMD\r\n");
	for(y=0;y<8;y++){
		DBG_vPrintf(1, "%x", sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[y]);
	}

	totalSegment = u16AHI_InitialiseEEP(&EEPROMDataLength);
	iAHI_EraseEEPROMsegment(lastsensor_num+EEpromAddress);
	iAHI_WriteDataIntoEEPROMsegment(lastsensor_num+EEpromAddress,0,&sensorList[lastsensor_num],63);
	vAHI_TimerEnable(E_AHI_TIMER_1, 16 ,FALSE, TRUE,FALSE);  //409.6ms
	vAHI_Timer1RegisterCallback(timer1_TSensorCMD_Callback);
	vAHI_TimerStartRepeat(E_AHI_TIMER_1, 0,100);
	*/
    // for 9600 test
    /*
	Temp = strtok(cmdStr, ",");
	DBG_vPrintf(1, "Temp1 %s\r\n", Temp);
	sensorList[lastsensor_num].info.sensorType=convertASCII2Hex(Temp);
	Temp = strtok(NULL, ",");
	DBG_vPrintf(1, "Temp2 %s\r\n", Temp);
	sensorList[lastsensor_num].info.sensorAddress=convertASCII2Hex(Temp);
*/
    sensorList[lastsensor_num].info.sensorAddress=0x01;
	sensorList[lastsensor_num].info.sensorType=XMT_288FC;
	sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[0]=sensorList[lastsensor_num].info.sensorAddress;    //sensor address
	sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[1]=0x03;
	sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[2]=0x00;
	sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[3]=0x00;
	sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[4]=0x00;
	sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[5]=0x01;
	calc_crc(sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd,6);

	sensorList[lastsensor_num].info.Enable=1;
	sensorList[lastsensor_num].info.mask=0x88;
	sensor_mode=EnableMode_c;

	DBG_vPrintf(1, "sensorList Count%x\r\n", sensorList[lastsensor_num].info.CmdCount);
	DBG_vPrintf(1, "sensorList mask%x\r\n", sensorList[lastsensor_num].info.mask);
	DBG_vPrintf(1, "sensorList Type%x\r\n", sensorList[lastsensor_num].info.sensorType);
	DBG_vPrintf(1, "sensorList Enable%x\r\n", sensorList[lastsensor_num].info.Enable);
	DBG_vPrintf(1, "sensorList Address%x\r\n", sensorList[lastsensor_num].info.sensorAddress);

		for(y=0;y<8;y++){
			DBG_vPrintf(1, "%x", sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[y]);
		}

		totalSegment = u16AHI_InitialiseEEP(&EEPROMDataLength);
		iAHI_EraseEEPROMsegment(lastsensor_num+EEpromAddress);
		iAHI_WriteDataIntoEEPROMsegment(lastsensor_num+EEpromAddress,0,&sensorList[lastsensor_num],63);
		vAHI_TimerEnable(E_AHI_TIMER_1, 16 ,FALSE, TRUE,FALSE);  //409.6ms
		vAHI_Timer1RegisterCallback(timer1_TSensorCMD_Callback);
		vAHI_TimerStartRepeat(E_AHI_TIMER_1, 0,100);

	return 1;
}

uint8_t processSensorD(char * cmdStr){

	char * sName;
	char * sAddress;
	char  sAddressH;
	char  sAddressL;
	char AddressTemp;
	uint8_t i=0;
	sName = strtok(cmdStr, " ");

	sAddress = strtok(cmdStr, ", ");
	sAddress = strtok(NULL, "\r");
	sAddressH=sAddress[0];
	sAddressL=sAddress[1];

	if(sAddressH>0x30 && sAddressH<=0x33){
		AddressTemp=((sAddressH-0x30)*10)+sAddressL-0x30;
	}else{
		AddressTemp=sAddressL-0x30;
	}

	for(i=0;i<MaxSensorNumber;i++){
		sensorList[i].info.sensorType=sName[0]-0x30;
		if(sensorList[i].info.sensorAddress==AddressTemp){
			sensorList[i].info.Enable=0;
			iAHI_EraseEEPROMsegment(i+EEpromAddress);
			break;
		}else{
			continue;
		}
	}

	return 1;
}

uint8 processRfADD(char * cmdStr){
    uint8_t x=0;
    uint8_t y=0;

	DBG_vPrintf(1, "processRfADD \r\n");

	lastsensor_num=check_Empty(&sensorList[0]);
	DBG_vPrintf(1, "lastsensor_num %x \r\n", lastsensor_num);
	if(lastsensor_num!=0xff){
		Temp = strtok(cmdStr, ",");
		DBG_vPrintf(1, "Temp1 %s\r\n", Temp);
		sensorList[lastsensor_num].info.sensorType=convertASCII2Hex(Temp);
		Temp = strtok(NULL, ",");
		DBG_vPrintf(1, "Temp2 %s\r\n", Temp);
		sensorList[lastsensor_num].info.sensorAddress=convertASCII2Hex(Temp);
		while(Temp!=NULL){
		    Temp = strtok(NULL, ",");
			DBG_vPrintf(1, "Temp3 %s\r\n", Temp);
		    Len=strlen(Temp);
		    if(Len==4){
		        break;
		    }
			DBG_vPrintf(1, "Len %x\r\n", Len);
		    for(x=0;x<=Len;x+=2){
		    	sensorList[lastsensor_num].info.sensorCmdNum[sensorList[lastsensor_num].info.CmdCount].sensorCmd[y++]=convertASCII2Hex(Temp+x);
		    }

		    sensorList[lastsensor_num].info.CmdCount++;
			calc_crc(sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd,Len);

			DBG_vPrintf(1, "sensorList CMD\r\n");
			for(y=0;y<8;y++){
				DBG_vPrintf(1, "%x", sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[y]);
			}
			sensorList[lastsensor_num].info.Enable=1;
			sensorList[lastsensor_num].info.mask=0x88;
			sensor_mode=EnableMode_c;
		}
	}
	DBG_vPrintf(1, "sensorList Count%x\r\n", sensorList[lastsensor_num].info.CmdCount);
	DBG_vPrintf(1, "sensorList mask%x\r\n", sensorList[lastsensor_num].info.mask);
	DBG_vPrintf(1, "sensorList Type%x\r\n", sensorList[lastsensor_num].info.sensorType);
	DBG_vPrintf(1, "sensorList Enable%x\r\n", sensorList[lastsensor_num].info.Enable);
	DBG_vPrintf(1, "sensorList Address%x\r\n", sensorList[lastsensor_num].info.sensorAddress);

	DBG_vPrintf(1, "sensorList CMD\r\n");
	for(y=0;y<8;y++){
		DBG_vPrintf(1, "%x", sensorList[lastsensor_num].info.sensorCmdNum[0].sensorCmd[y]);
	}

	totalSegment = u16AHI_InitialiseEEP(&EEPROMDataLength);
	iAHI_EraseEEPROMsegment(lastsensor_num+EEpromAddress);
	iAHI_WriteDataIntoEEPROMsegment(lastsensor_num+EEpromAddress,0,&sensorList[lastsensor_num],63);

	return 0;
}


uint8 processRfDEL(char * cmdStr){
    uint8_t x=0;
    uint8_t y=0;
	uint8  SensorType=0;
	uint8  SensorAddress=0;
	uint8  SensorCMD[20]={0};

	Temp = strtok(cmdStr, ",");
	DBG_vPrintf(1, "Temp1 %s\r\n", Temp);
	SensorType=convertASCII2Hex(Temp);
	Temp = strtok(NULL, ",");
	DBG_vPrintf(1, "Temp2 %s\r\n", Temp);
	SensorAddress=convertASCII2Hex(Temp);

	while(Temp!=NULL){
	    Temp = strtok(NULL, ",");
		DBG_vPrintf(1, "Temp3 %s\r\n", Temp);
	    Len=strlen(Temp);
	    if(Len==4){
	        break;
	    }
		DBG_vPrintf(1, "Len %x\r\n", Len);
	    for(x=0;x<=Len;x+=2){
	    	SensorCMD[y++]=convertASCII2Hex(Temp+x);
	    }

		calc_crc(SensorCMD,6);

		DBG_vPrintf(1, "SensorCMD \r\n");
		for(y=0;y<8;y++){
			DBG_vPrintf(1, "%x", SensorCMD[y]);
		}
	}

	for(y=0;y<MaxSensorNumber;y++){
		if(sensorList[y].info.sensorType==SensorType && sensorList[y].info.sensorAddress==SensorAddress){
			for(x=0;x<20;x++){    //sensor Cmd Number 20
				if (strcmp(sensorList[y].info.sensorCmdNum[x].sensorCmd, SensorCMD)==0){
					sensorList[y].info.Enable=0;
					iAHI_EraseEEPROMsegment(y+EEpromAddress);
					break;
				}
			}
		}
/*
		if(sensorList[i].info.sensorAddress==SensorAddress){
			sensorList[i].info.Enable=0;
			iAHI_EraseEEPROMsegment(i+EEpromAddress);
			break;
		}else{
			continue;
		}
		*/
	}





	/*

	sName = strtok(cmdStr, " ");

	sAddress = strtok(cmdStr, ", ");
	sAddress = strtok(NULL, "\r");
	sAddressH=sAddress[0];
	sAddressL=sAddress[1];

	if(sAddressH>0x30 && sAddressH<=0x33){
		AddressTemp=((sAddressH-0x30)*10)+sAddressL-0x30;
	}else{
		AddressTemp=sAddressL-0x30;
	}

	for(i=0;i<MaxSensorNumber;i++){
		sensorList[i].info.sensorType=sName[0]-0x30;
		if(sensorList[i].info.sensorAddress==AddressTemp){
			sensorList[i].info.Enable=0;
			iAHI_EraseEEPROMsegment(i+EEpromAddress);
			break;
		}else{
			continue;
		}
	}
*/
	return 0;
}

uint8 processRfEnable(char * cmdStr){
	vAHI_TimerEnable(E_AHI_TIMER_1, 16 ,FALSE, TRUE,FALSE);  //409.6ms
	vAHI_Timer1RegisterCallback(timer1_TSensorCMD_Callback);
	vAHI_TimerStartRepeat(E_AHI_TIMER_1, 0,100);
	return 0;
}

uint8 processRfDisable(char * cmdStr){
	DBG_vPrintf(1, "vAHI_Timer1Disable\r\n");
	vAHI_TimerDisable(E_AHI_TIMER_1);
	return 0;
}


uint8_t check_Empty(SensorLog_t *sensorTemp){

	uint8_t i=0;

	for(i=0;i<MaxSensorNumber;i++){
		if(sensorTemp[i].info.sensorType==0x00 && sensorList[i].info.Enable==0){
			return i;
		}
	}

	return 0xff;
}

uint8_t check_HaveData(SensorLog_t *sensorTemp){
	uint8_t i=0;

	for(i=0;i<MaxSensorNumber;i++){
		if(sensorTemp[i].info.sensorType!=0x00 && sensorList[i].info.Enable!=0){
			return i;
		}
	}
	return 0xff;
}

PUBLIC void timer1_SensorCMD_Callback(uint32 u32Device, uint32 u32ItemBitmap){
	static uint8_t timeCount=0;
	char outStr[8]={0};
	uint8_t y=0;
	//LED3Off
	timeCount++;
	DBG_vPrintf(1, "T1 %d \r\n", timeCount);
	if(timeCount>10){

		y=check_HaveData(&sensorList[0]);
		DBG_vPrintf(1, "check_HaveData %x\r\n", y);
		if(check_HaveData(&sensorList[0])!= 0xFF){    //check list empty?
			if(getSensorCMD(outStr)!=0xFF){
				printCmd(outStr,8);
			}
		DBG_vPrintf(1, "send CMD\r\n");
		/*vAHI_TimerEnable(E_AHI_TIMER_4, 32 ,FALSE, TRUE,FALSE);  //409.6ms
		vAHI_Timer4RegisterCallback(timer4_SendRF_Callback);
		vAHI_TimerStartRepeat(E_AHI_TIMER_4, 0,100);*/
		}else{
			DBG_vPrintf(1, "vAHI_Timer1Disable\r\n");
			vAHI_TimerDisable(E_AHI_TIMER_1);
		}

		timeCount=0;
	}
}

PUBLIC void timer1_TSensorCMD_Callback(uint32 u32Device, uint32 u32ItemBitmap){
	static uint8_t timeCount=0;
	uint8 sensor_Number=0;
	char outStr[8]={0};
	uint8_t y=0,x=0;
	static uint8_t z=10;
	timeCount++;
	//DBG_vPrintf(1, "T1 %d \r\n", timeCount);

	if(timeCount==5){
		DBG_vPrintf(1, "T5 %d \r\n", timeCount);
		y=check_HaveData(&sensorList[0]);
		DBG_vPrintf(1, "check_HaveData %x\r\n", y);
		if(check_HaveData(&sensorList[0])!= 0xFF){    //check list empty?
			if(getSensorCMD(outStr)!=0xFF){
				printCmd(outStr,8);
			}
		DBG_vPrintf(1, "send CMD\r\n");

		}else{
			DBG_vPrintf(1, "vAHI_Timer1Disable\r\n");
			vAHI_TimerDisable(E_AHI_TIMER_1);
		}
		timeCount=0;
	}

/*
	if(timeCount==7){
		DBG_vPrintf(1, "T7 SendRF \r\n");
		sensor_RF_Packet[SEQ_POS] = WUART_u8MsgSeqTxNew();
		sensor_RF_Packet[Time_POS]=0x00;   //log data
		sensor_RF_Packet[Address_POS]=sensorList[sensor_Number].info.sensorAddress;
		sensor_RF_Packet[Type_POS]=sensorList[sensor_Number].info.sensorType;
		sensor_RF_Packet[DataSeQ_POS]=0xff;
	    sensor_RF_Packet[13]=0x55;
	    sensor_RF_Packet[14]=0xAA;
		sensor_RF_Packet[15]=0xBB;

		WUART_vTx(0xFFFF, 16, sensor_RF_Packet);

		for(y=0;y<16;y++){
			DBG_vPrintf(1, "sensor_RF_Packet %x", sensor_RF_Packet[y]);
		}

		timeCount=0;
	}
*/
	if(0){
	//if(timeCount==7){
		sensor_Number=getSensorNumber();
		DBG_vPrintf(1, "getSensorNumber %d \r\n",sensor_Number);
		sensor_RF_Packet_len=14;
		if(sensor_Number!=0xFF){
			if(0){
			//if(OldsensorData_Count[sensor_Number].oldIndex==sensorList[sensor_Number].dataHeaderIndex){     //for log
				sensor_RF_Packet[SEQ_POS] = WUART_u8MsgSeqTxNew();
				sensor_RF_Packet[Time_POS]=0x00;   //log data
				sensor_RF_Packet[Address_POS]=sensorList[sensor_Number].info.sensorAddress;
				sensor_RF_Packet[Type_POS]=sensorList[sensor_Number].info.sensorType;
				sensor_RF_Packet[DataSeQ_POS]=0xff;
				if(rF_Log_Count==0){
					rF_Log_Count=sensorList[sensor_Number].dataHeaderIndex-sensorList[sensor_Number].dataTailIndex+1;
				}
				for(x=rF_Log_Count;x<sensorList[sensor_Number].dataHeaderIndex;x++){
					memcpy(sensor_RF_Packet+sensor_RF_Packet_len+rF_Log_len, &x,1);   //seq number
					memcpy(sensor_RF_Packet+sensor_RF_Packet_len+rF_Log_len+1, &sensorList[sensor_Number].sensorDataNum[x].sensorData[3],sensorList[sensor_Number].sensorDataNum[x].sensorData[2]);
					rF_Log_len=rF_Log_len+sensorList[sensor_Number].sensorDataNum[sensorList[sensor_Number].dataTailIndex].sensorData[2]+1;   //catch data len
			    }
				sensor_RF_Packet[Length_POS]=rF_Log_len;
				/* Send RF*/
				if (gConfigData.settings.targetAddr == 0xFFFF){
					WUART_vTx(0xFFFF, sensor_RF_Packet_len+rF_Log_len, sensor_RF_Packet);
				}else{
					uint64 targetAddr = (uint16 *)gConfigData.settings.targetAddr;
					//WUART_vTxAck(targetAddr, u8CmdData, au8CmdData);
				}
				DBG_vPrintf(1, "vAHI_Timer1Disable\r\n");
				vAHI_TimerDisable(E_AHI_TIMER_1);
			}else{   //for immediate
				//sensor_RF_Packet[SEQ_POS] = WUART_u8MsgSeqTxNew();
				sensor_RF_Packet[SEQ_POS]=z++;
				sensor_RF_Packet[Time_POS]=0x01;   //immediate data
				sensor_RF_Packet[Address_POS]=sensorList[sensor_Number].info.sensorAddress;
				sensor_RF_Packet[Type_POS]=sensorList[sensor_Number].info.sensorType;
				sensor_RF_Packet[DataSeQ_POS]=sensorList[sensor_Number].dataHeaderIndex;
				sensor_RF_Packet[Length_POS]=sensorList[sensor_Number].sensorDataNum[sensorList[sensor_Number].dataTailIndex].sensorData[2];

				DBG_vPrintf(WUART_TRACE, "\r\nWUART RF listNum %d\r\n",sensor_Number);
				for(y=0;y<7;y++){
					DBG_vPrintf(1, "%x", sensorList[sensor_Number].sensorDataNum[sensorList[sensor_Number].dataTailIndex].sensorData[y]);
				}

				memcpy(sensor_RF_Packet+sensor_RF_Packet_len, &sensorList[sensor_Number].sensorDataNum[sensorList[sensor_Number].dataTailIndex].sensorData[3],sensor_RF_Packet[Length_POS]);
				//sensorList[sensor_Number].dataTailIndex++;  //test commed
				if(sensorList[sensor_Number].dataTailIndex > MaxDataNumber){
					sensorList[sensor_Number].dataTailIndex=0;
				}
				sensor_RF_Packet_len=sensor_RF_Packet_len+sensor_RF_Packet[Length_POS];
				//rF_Immediate_Count++;
				/* Send RF*/
				if (gConfigData.settings.targetAddr == 0xFFFF){
					WUART_vTx(0xFFFF, sensor_RF_Packet_len, sensor_RF_Packet);
					DBG_vPrintf(1, "SendRF \r\n");
					for(y=0;y<sensor_RF_Packet_len;y++){
						DBG_vPrintf(1, "%02x", sensor_RF_Packet[y]);
					}
				}else{
					uint64 targetAddr = (uint16 *)gConfigData.settings.targetAddr;
					//WUART_vTxAck(targetAddr, u8CmdData, au8CmdData);
				}
			}
			//OldsensorData_Count[sensor_Number].oldIndex=sensorList[sensor_Number].dataHeaderIndex;  test commed
		}

		send_RF_Data_Count=0;

		timeCount=0;
	}

}

PUBLIC void timer4_SendRF_Callback(uint32 u32Device, uint32 u32ItemBitmap){

	uint8 sensor_Number=0;
    uint8 x=0;
    uint8 y=0;
	send_RF_Data_Count++;
	DBG_vPrintf(1, "T4 %d \r\n", send_RF_Data_Count);

	if(send_RF_Data_Count>5){

		//sensor_Number=getSensorNumber();
		sensor_Number=0;
		sensorList[sensor_Number].dataHeaderIndex=1;
		DBG_vPrintf(1, "getSensorNumber %d\r\n",sensor_Number);
		sensor_RF_Packet_len=14;
		if(sensor_Number!=0xFF){
			if(OldsensorData_Count[sensor_Number].oldIndex==sensorList[sensor_Number].dataHeaderIndex){     //for log
				DBG_vPrintf(1, "T\r\n");
				sensor_RF_Packet[SEQ_POS] = WUART_u8MsgSeqTxNew();
				sensor_RF_Packet[Time_POS]=0x00;   //log data
				sensor_RF_Packet[Address_POS]=sensorList[sensor_Number].info.sensorAddress;
				sensor_RF_Packet[Type_POS]=sensorList[sensor_Number].info.sensorType;
				sensor_RF_Packet[DataSeQ_POS]=0xff;
				if(rF_Log_Count==0){
					rF_Log_Count=sensorList[sensor_Number].dataHeaderIndex-sensorList[sensor_Number].dataTailIndex+1;
				}
				for(x=rF_Log_Count;x<sensorList[sensor_Number].dataHeaderIndex;x++){
					memcpy(sensor_RF_Packet+sensor_RF_Packet_len+rF_Log_len, &x,1);   //seq number
					memcpy(sensor_RF_Packet+sensor_RF_Packet_len+rF_Log_len+1, &sensorList[sensor_Number].sensorDataNum[x].sensorData[3],sensorList[sensor_Number].sensorDataNum[x].sensorData[2]);
					rF_Log_len=rF_Log_len+sensorList[sensor_Number].sensorDataNum[sensorList[sensor_Number].dataTailIndex].sensorData[2]+1;   //catch data len
			    }
				sensor_RF_Packet[Length_POS]=rF_Log_len;

				DBG_vPrintf(1, "\r\n Send RF Log DataL \r\n ");
				for(y=0;y<(sensor_RF_Packet_len+rF_Log_len);y++){
					DBG_vPrintf(1, "%x", sensor_RF_Packet[y]);
				}
				/* Send RF*/
				if (gConfigData.settings.targetAddr == 0xFFFF) {
					WUART_vTx(0xFFFF, sensor_RF_Packet_len+rF_Log_len, sensor_RF_Packet);
				}else{
					uint64 targetAddr = (uint16 *)gConfigData.settings.targetAddr;
					//WUART_vTxAck(targetAddr, u8CmdData, au8CmdData);
				}

				vAHI_TimerDisable(E_AHI_TIMER_4);
				DBG_vPrintf(1, "vAHI_Timer4DisableL\r\n");
			}else{   //for immediate
				DBG_vPrintf(1, "F\r\n");
				sensor_RF_Packet[SEQ_POS] = WUART_u8MsgSeqTxNew();
				sensor_RF_Packet[Time_POS]=0x01;   //immediate data
				sensor_RF_Packet[Address_POS]=sensorList[sensor_Number].info.sensorAddress;
				sensor_RF_Packet[Type_POS]=sensorList[sensor_Number].info.sensorType;
				sensor_RF_Packet[DataSeQ_POS]=sensorList[sensor_Number].dataHeaderIndex;
				sensor_RF_Packet[Length_POS]=sensorList[sensor_Number].sensorDataNum[sensorList[sensor_Number].dataTailIndex].sensorData[2];
				memcpy(sensor_RF_Packet+sensor_RF_Packet_len, &sensorList[sensor_Number].sensorDataNum[sensorList[sensor_Number].dataTailIndex].sensorData[3],sensor_RF_Packet[Length_POS]);
				sensorList[sensor_Number].dataTailIndex++;
				if(sensorList[sensor_Number].dataTailIndex > MaxDataNumber){
					sensorList[sensor_Number].dataTailIndex=0;
				}
				sensor_RF_Packet_len=sensor_RF_Packet_len+sensor_RF_Packet[Length_POS];
				//rF_Immediate_Count++;
/*
				DBG_vPrintf(1, "\r\n Send RF DataI %d \r\n ",sensor_RF_Packet_len);
				for(y=0;y<sensor_RF_Packet_len;y++){
					DBG_vPrintf(1, "%x", sensor_RF_Packet[y]);
				}
*/
			    sensor_RF_Packet[14]=0xAA;
				sensor_RF_Packet[15]=0xBB;
				/* Send RF*/
				if (gConfigData.settings.targetAddr == 0xFFFF){
					//WUART_vTx(0xFFFF, sensor_RF_Packet_len, sensor_RF_Packet);
					WUART_vTx(0xFFFF, 16, sensor_RF_Packet);
				}else{
					//uint64 targetAddr = (uint16 *)gConfigData.settings.targetAddr;
					//WUART_vTxAck(targetAddr, u8CmdData, au8CmdData);
				}

			}
			//DBG_vPrintf(1, "OldsensorData_Count %x\r\n",OldsensorData_Count[sensor_Number].oldIndex);
			//DBG_vPrintf(1, "dataHeaderIndex %x\r\n",sensorList[sensor_Number].dataHeaderIndex);

			DBG_vPrintf(1, "y %p\r\n",y);
y++;
         //OldsensorData_Count[sensor_Number].oldIndex=sensorList[sensor_Number].dataHeaderIndex;
		}
		DBG_vPrintf(1, "vAHI_Timer4Disable\r\n");
		//vAHI_TimerDisable(E_AHI_TIMER_4);
		send_RF_Data_Count=0;
	}
}


uint8_t getSensorCMD(char *sData){
	uint8_t result=0xff;
	//static uint8_t gCurrentSensorIndex=0;

	while (((sensorList[gCurrentSensorCMDIndex].info.Enable==0))){
		gCurrentSensorCMDIndex++;
		if (gCurrentSensorCMDIndex>= MaxSensorNumber){
			gCurrentSensorCMDIndex=0;
			break;
		}
	}
	if ((sensorList[gCurrentSensorCMDIndex].info.Enable!=0)){
		memcpy(sData, sensorList[gCurrentSensorCMDIndex].info.sensorCmdNum[gCurrentSensorCMDIndex].sensorCmd,8);
		result=gCurrentSensorCMDIndex;
		gCurrentSensorCMDIndex++;
		if (gCurrentSensorCMDIndex>= MaxSensorNumber){
			gCurrentSensorCMDIndex=0;
		}
	}else{
		result=0xFF;
	}
	return result;
}

uint8_t getSensorNumber(void){
	uint8_t result=0xff;

	//DBG_vPrintf(1, "getSNo\r\n");

	while (((sensorList[gCurrentSensorNUMIndex].info.Enable==0))){
		gCurrentSensorNUMIndex++;
		//DBG_vPrintf(1, "getSN %d\r\n",gCurrentSensorNUMIndex);
		if (gCurrentSensorNUMIndex>= MaxSensorNumber){
			gCurrentSensorNUMIndex=0;
			break;
		}
	}

	if ((sensorList[gCurrentSensorNUMIndex].info.Enable!=0)){
		//DBG_vPrintf(1, "getSN T %d\r\n",gCurrentSensorNUMIndex);
		result=gCurrentSensorNUMIndex;
		gCurrentSensorNUMIndex++;
		if (gCurrentSensorNUMIndex>= MaxSensorNumber){
			gCurrentSensorNUMIndex=0;
		}
	}else{
		//DBG_vPrintf(1, "getSN F \r\n");
		result=0xFF;
	}

	return result;
}


void calc_crc(unsigned char *buf,int len){
	 unsigned short crc = 0xFFFF;
	 int i,j;
	 unsigned char LSB;
	 for (i = 0; i < len; i++) {
	  crc ^= buf[i];
	  for (j = 0; j < 8; j++) {
	   LSB= crc & 1;
	   crc = crc >> 1;
	   if (LSB) {
	    crc ^= 0xA001;
	   }
	  }
	 }
	 buf[6]=(crc & 0x00FF);
	 buf[7]=(crc & 0xFF00) >> 8;
}

void printCmd(uint8 *cmd,uint8 len){
    uint8 i =0;

	for(i=0;i<len;i++){
		UART_bPutChar(WUART_sData.u8Uart,  cmd[i]);
	}
}

void readEEpromSensor(void){
	uint8 x=0;

	for(x=0;x<MaxSensorNumber;x++){
		iAHI_ReadDataFromEEPROMsegment(x+EEpromAddress,0,&sensorList_Test[x],63);
	}
}

