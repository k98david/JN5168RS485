/*
 * QEvent_Process.c

 *
 *  Created on: 2017/9/4
 *      Author: K98David
 */

/* Jennic includes */
#include <jendefs.h>
#include <AppHardwareApi.h>
#include <string.h>
#include "QApp.h"
#include "QEvent_Process.h"
#include "Qsensor.h"
#include "wuart.h"
#include "config.h"

uint16 gEvents= evNothing;
TimerState_t Timer4NowState=Timer4Stop;
//TimerState_t Timer4oldState=Timer4Stop;
bool SendLsCmdData=FALSE;
uint8 LsRFlen=0;
bool TestCount=FALSE;
extern bool ADV_Pack;
extern uint8 ModeBusData[ModeBusArrLen];

uint8 CMDR_Index=0;



void Delay(uint16 ms){  //3.65us
	uint16 delay;
	 volatile uint32_t i;
	 for (delay = ms; delay >0 ; delay--)
	//1ms loop with -Os optimisation
	  {
	  for (i=1; i >0;i--){};
	  }
}

void Eventhandle(void){
    if (gEvents & evKey0PressedEvent){
		DBG_vPrintf(Debug, "\r\n gKey0Event");
		if (gConfigData.settings.deviceType == dtOne2OneMaster){
			gWorkingMode = wmPairingMode_c;
			gPairingPeriodCounter=0;
		}else{
	    	ED_vReqActiveScan();
			gWorkingMode = wmPairingMode_c;
			gPairingPeriodCounter=0;
		}

		gEvents &=~ evKey0PressedEvent;
    }else if (gEvents & evKey1PressedEvent){
		DBG_vPrintf(Debug, "\r\n gKey1Event");
		gEvents &=~ evKey1PressedEvent;
    }else if (gEvents & evPolling_EnableEvent){

    	vAHI_TimerEnable(E_AHI_TIMER_4, 16 ,FALSE, TRUE,FALSE);  //409.6ms
    	vAHI_Timer4RegisterCallback(timer4_Polling_Callback);
    	vAHI_TimerStartRepeat(E_AHI_TIMER_4, 0,125);   //2's
    	sensor_mode=EnableMode_c;
		gEvents &=~ evPolling_EnableEvent;
    }else if (gEvents & evFindSensor_ListEvent){

    	char RS485Out_Data[8]={0};
		DBG_vPrintf(Debug, "evFindSensor_ListEvent\r\n");
		if(getSensorCMD(RS485Out_Data)!=0xFF){
			DBG_vPrintf(Debug, "evFindSensor_ListEvent T\r\n");
			printCmd(RS485Out_Data,8);
			Sensor485State=SendCMD;
		}



		gEvents &=~ evFindSensor_ListEvent;
    }else if (gEvents & evFindSensor_CountEvent){

    	char RS485Out_Data[8]={0};

		DBG_vPrintf(Debug, "evFindSensor_CountEvent\r\n");
		if(getSensorCMD(RS485Out_Data)!=0xFF){
			DBG_vPrintf(Debug, "evFindSensor_CountEvent T\r\n");
			printCmd(RS485Out_Data,8);
			Sensor485State=SendCMD;
		}



		gEvents &=~ evFindSensor_CountEvent;
    }else if (gEvents & evUpdate_DataEvent){
    	uint8_t x=0;
    	uint8 gRFRS485_Count=0;
    	uint8 DataTemp[ModeBusArrLen]={0};
    	uint8 Data[4]={"DATA"};
    	uint8 Data2Len=0;
    	uint8 ModBusLen=0;

		memcpy(DataTemp,Data,4);
		ModBusLen=ModeBusData[2]+3;
		DataTemp[4]=CMD_Table_Index;

		//DataTemp[4]=ModeBusData[0];  //SID
		memcpy(&DataTemp[5], &ModeBusData[0],ModBusLen);
		//memcpy(&DataTemp[5], &ModeBusData[3],ModeBusData[2]);
		DBG_vPrintf(Debug, "\r\nsensorDataLen=%d\r\n", ModBusLen);

		DataTemp[5+ModBusLen]=0x0d;   //0x0D
		DataTemp[5+ModBusLen+1]=0x0a;  //0x0A
		Data2Len=(4+ModBusLen+1)+2;

		DBG_vPrintf(Debug, "\r\nData2Len=%d\r\n", Data2Len);
/*
    	for(x=0;x<Data2Len;x++){
		    DBG_vPrintf(1, "DataTemp[%d]=%x\r\n", x,DataTemp[x]);
    	}
*/

		au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
		memcpy(&au8CmdData[8],DataTemp,Data2Len);
		LsRFlen=Data2Len+8;

		sendEvent(evRfLs_SendRF_Event);

/*     check read sid code
		memcpy(DataTemp,Data,4);

		DataTemp[4]=sensorList[gRXRS485SensorCMDIndex].info.sensorAddress;

		memcpy(&DataTemp[5], &sensorList[gRXRS485SensorCMDIndex].sensorDataNum[0].sensorData[3],sensorList[gRXRS485SensorCMDIndex].sensorDataNum[0].sensorDataLen);
		DBG_vPrintf(1, "\r\nsensorDataLen=%d\r\n", sensorList[gRXRS485SensorCMDIndex].sensorDataNum[0].sensorDataLen);
		DataTemp[5+sensorList[gRXRS485SensorCMDIndex].sensorDataNum[0].sensorDataLen]=0x0d;   //0x0D
		DataTemp[5+sensorList[gRXRS485SensorCMDIndex].sensorDataNum[0].sensorDataLen+1]=0x0a;  //0x0A
		Data2Len=(4+sensorList[gRXRS485SensorCMDIndex].sensorDataNum[0].sensorDataLen+1)+2;

		DBG_vPrintf(1, "\r\nData2Len=%d\r\n", Data2Len);

    	for(x=0;x<Data2Len;x++){
		    DBG_vPrintf(1, "DataTemp[%d]=%x\r\n", x,DataTemp[x]);
    	}


		au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
		memcpy(&au8CmdData[8],DataTemp,Data2Len);
		LsRFlen=Data2Len+8;

		sendEvent(evRfLs_SendRF_Event);
*/
		gEvents &=~ evUpdate_DataEvent;
    }else if (gEvents & evRS485No_DataEvent){
    	DBG_vPrintf(Debug, "No485Data\r\n");
		gEvents &=~ evRS485No_DataEvent;
    }else if (gEvents & evReper_Event){

		gEvents &=~ evReper_Event;
    }else if (gEvents & evRfLsList_Event){

    	uint8 x=0,y=0,List_Count=0;
    	uint8 LsCMDTemp[50]={0};
    	//uint8 LsCMDTemp2[50]={0};
    	uint8 Ls2Len=0;

    	uint8 LSist[4]={"LIST"};

		memcpy(LsCMDTemp,LSist,4);
		DBG_vPrintf(Debug, "StarlsList_Number=%d , EndlsList_Number=%d\r\n",StarlsList_Number,EndlsList_Number);

    	for(x=StarlsList_Number;x<StarlsList_Number+EndlsList_Number;x++){
    		DBG_vPrintf(Debug, "x=%d\r\n",x);

    		LsCMDTemp[4]=x+1;  //Count

			LsCMDTemp[5+List_Count]=sensorList[x].info.sensorAddress;   //address SID
			LsCMDTemp[6+List_Count]=sensorList[x].info.sensorType;  //sensorType

			LsCMDTemp[7+List_Count]=sensorList[x].info.CMD_Table_number[0];  //CMDT

			LsCMDTemp[8+List_Count]=sensorList[x].info.LoopTime>>8;  //LoopTime
			LsCMDTemp[9+List_Count]=sensorList[x].info.LoopTime;  //LoopTime


			List_Count=List_Count+5;
    	}

    	LsCMDTemp[4+List_Count+1]=0x0d;   //0x0D
    	LsCMDTemp[4+List_Count+2]=0x0a;  //0x0A
    	Ls2Len=(4+List_Count+2)+1;

		DBG_vPrintf(Debug, "\r\nLs2Len=%d\r\n", Ls2Len);

    	for(x=0;x<Ls2Len;x++){
		    DBG_vPrintf(Debug, "LsCMDTemp2[%d]=%x\r\n", x,LsCMDTemp[x]);
    	}

		/* RF pack*/
		au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
		memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
		LsRFlen=Ls2Len+8;

		sendEvent(evRfLs_SendRF_Event);

		/*
    	if(Timer4NowState==Timer4Run){
    		SendLsCmdData=TRUE;
    	}else if(Timer4NowState==Timer4Stop){
    		SendLsCmdData=TRUE;
        	vAHI_TimerEnable(E_AHI_TIMER_4, 16 ,FALSE, TRUE,FALSE);  //409.6ms
        	vAHI_Timer4RegisterCallback(timer4_Polling_Callback);
        	vAHI_TimerStartRepeat(E_AHI_TIMER_4, 0,500);   //2's
    	}
*/

    	/* new countu */
    	/*
    	DBG_vPrintf(1, "LSlist\r\n");
    	while(x<MaxSensorNumber){
	    	DBG_vPrintf(1, "mask x=%d\r\n",x);
    		if(sensorList[x].info.mask !=0){
    	    	DBG_vPrintf(1, "mask!=0\r\n");

        		memcpy(LsCMDTemp,LSist,4);
        		LsCMDTemp[4]=x; //Arr Number
    			LsCMDTemp[5]=sensorList[x].info.sensorAddress;   //address
    			LsCMDTemp[6]=sensorList[x].info.sensorType;   //sensorType
    			LsCMDTemp[7]=sensorList[x].info.CmdCount; //CMD Count

    			for(y=0;y<sensorList[x].info.CmdCount;y++){
        			if((List_Count<(sensorList[x].info.CmdCount)-1)){
            			LsCMDTemp[8+y]=sensorList[x].info.CMD_Table_number[List_Count++]; //,
        			}else{
            			LsCMDTemp[8+y]=sensorList[x].info.CMD_Table_number[List_Count]; //,
        				List_Count=0;
        				break;
        			}
    			}

        		memcpy(&LsCMDTemp2[Ls2Len],LsCMDTemp,8+y+1);
    			Ls2Len=8+y+1+Ls2Len;
    		}
    		x++;
    	}

		/* RF pack*/
    	/*
		au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
		memcpy(&au8CmdData[8],LsCMDTemp2,Ls2Len);
		LsRFlen=8+Ls2Len;

    	if(Timer4NowState==Timer4Run){
    		SendLsCmdData=TRUE;
    	}else if(Timer4NowState==Timer4Stop){
    		SendLsCmdData=TRUE;
        	vAHI_TimerEnable(E_AHI_TIMER_4, 16 ,FALSE, TRUE,FALSE);  //409.6ms
        	vAHI_Timer4RegisterCallback(timer4_Polling_Callback);
        	vAHI_TimerStartRepeat(E_AHI_TIMER_4, 0,500);   //2's
    	}

*/


		gEvents &=~ evRfLsList_Event;
    }else if (gEvents & evRfLsCMD1_Event){

    	uint8 x=0,y=0,CMD_Count=0;
    	uint8 LsCMDTemp[50]={0};
    	//uint8 LsCMDTemp2[100]={0};
    	uint8 Ls2Len=0;
    	uint8 CMD[4]={"CMDT"};

    	for(x=0;x<SensorCMDNumber;x++){
    		iAHI_ReadDataFromEEPROMsegment(x+EEpromCMDTable+EEpromAddress,0,&SensorCMD_Table.sensorCmdTable_Num[x],64);
    	}
    	vAHI_TimerEnable(E_AHI_TIMER_0, 7,FALSE, TRUE,FALSE);
    	vAHI_Timer0RegisterCallback(timer0Callback);
    	vAHI_TimerStartRepeat(E_AHI_TIMER_0, 0,100);

    	x=0;

    	memcpy(LsCMDTemp,CMD,4);

    	for(x=0;x<5;x++){
    		DBG_vPrintf(Debug, "x=%d\r\n",x);
/*
    		if(SensorCMD_Table[0].sensorCmdTable_Num[x].sensorCmdLen!=0){
    			LsCMDTemp[4]=x+1;  //Count
    		}
*/
    		LsCMDTemp[4]=x+1;  //Count

			LsCMDTemp[5+CMD_Count]=x;   //Index
			LsCMDTemp[6+CMD_Count]=SensorCMD_Table.sensorCmdTable_Num[x].sensorCmdLen;  //CMD LEN

			//if(SensorCMD_Table[0].sensorCmdTable_Num[x].sensorCmdLen !=0){
				for(y=0;y<SensorCMD_Table.sensorCmdTable_Num[x].sensorCmdLen;y++){
					LsCMDTemp[7+y+CMD_Count]=SensorCMD_Table.sensorCmdTable_Num[x].sensorCmd[y];
				}
			//}else{
			//	y=1;
			//	LsCMDTemp[7+y+CMD_Count]=0;
			//}


			CMD_Count=CMD_Count+y+2;
    	}

       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
		LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
		Ls2Len=(4+CMD_Count+2)+1;
/*
		DBG_vPrintf(1, "\r\nLs2Len=%d\r\n", Ls2Len);

		for(x=0;x<Ls2Len;x++){
			DBG_vPrintf(1, "LsCMDTemp2[%d]=%x\r\n", x,LsCMDTemp[x]);
		}
*/

		/* RF pack*/
		au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
		memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
		LsRFlen=Ls2Len+8;

		sendEvent(evRfLs_SendRF_Event);

		gEvents &=~ evRfLsCMD1_Event;
    }else if (gEvents & evRfLs_SendRF_Event){
    	uint8_t y=0;
		DBG_vPrintf(Debug, "evRfLs_SendRF_Event LsRFlen=%d\r\n",LsRFlen);
		/* Send RF*/
		if (gConfigData.settings.targetAddr == 0xFFFF){
			WUART_vTx(0xFFFF, LsRFlen, au8CmdData);
			DBG_vPrintf(Debug, "SendRF \r\n");
			/*
			for(y=0;y<sensor_RF_Packet_len;y++){
				DBG_vPrintf(1, "%02x", au8CmdData[y]);
			}
			*/
		}else{
			uint64 targetAddr = (uint16 *)gConfigData.settings.targetAddr;
/*
			for(y=0;y<sensor_RF_Packet_len;y++){
				DBG_vPrintf(1, "%02x", au8CmdData[y]);
			}
*/
			if(!ADV_Pack){
				DBG_vPrintf(Debug, "SendRFACK \r\n");
				WUART_vTxAck(targetAddr, LsRFlen, au8CmdData);
			}
		}
		timeCount=0;
		gFlashDataLEDG=TRUE;
		PSW_CMD_flag=FALSE;  //restart RS485 Loop
		gEvents &=~ evRfLs_SendRF_Event;
    }/*else if (gEvents & evRfLsCMD2_Event){

    	uint8 x=0,y=0,CMD_Count=0;
    	uint8 LsCMDTemp[50]={0};
    	uint8 Ls2Len=0;
    	uint8 CMD[4]={"CMDT"};

    	/*    old code no eeprom add
    	for(x=0;x<SensorCMDNumber;x++){
    		iAHI_ReadDataFromEEPROMsegment(x+EEpromCMDTable+EEpromAddress,0,&SensorCMD_Table.sensorCmdTable_Num[x],64);
    	}
    	vAHI_TimerEnable(E_AHI_TIMER_0, 7,FALSE, TRUE,FALSE);
    	vAHI_Timer0RegisterCallback(timer0Callback);
    	vAHI_TimerStartRepeat(E_AHI_TIMER_0, 0,100);

    	x=0;

    	memcpy(LsCMDTemp,CMD,4);

    	for(x=5;x<10;x++){
    		DBG_vPrintf(Debug, "x=%d\r\n",x);

    		LsCMDTemp[4]=x+1-5;  //Count

			LsCMDTemp[5+CMD_Count]=x;   //Index
			LsCMDTemp[6+CMD_Count]=SensorCMD_Table.sensorCmdTable_Num[x].sensorCmdLen;  //CMD LEN

			for(y=0;y<SensorCMD_Table.sensorCmdTable_Num[x].sensorCmdLen;y++){
				LsCMDTemp[7+y+CMD_Count]=SensorCMD_Table.sensorCmdTable_Num[x].sensorCmd[y];
			}

			CMD_Count=CMD_Count+y+2;
    	}

       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
		LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
		Ls2Len=(4+CMD_Count+2)+1;

		DBG_vPrintf(1, "\r\nLs2Len=%d\r\n", Ls2Len);

		for(x=0;x<Ls2Len;x++){
			DBG_vPrintf(1, "LsCMDTemp2[%d]=%x\r\n", x,LsCMDTemp[x]);
		}

		au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
		memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
		LsRFlen=Ls2Len+8;

		sendEvent(evRfLs_SendRF_Event);

		gEvents &=~ evRfLsCMD2_Event;
    }*/else if (gEvents & evCheckCount_Event){   //Check Count
        uint8_t x=0;

    	for(x=Oldindex;x<MaxSensorNumber;x++){
           if((sensorList[x].info.CountTime>=sensorList[x].info.LoopTime)&&(sensorList[x].info.Enable!=0)&&(sensorList[x].info.sensorAddress!=0)){
        	   // DBG_vPrintf(1, "x=%d Oldindex=%d LoopTime=%d\r\n", x,Oldindex,sensorList[x].info.LoopTime);
        	    CpydataFifo(x);
            	Oldindex=x+1;
            	//break;
            }
    	}
    	if(x==MaxSensorNumber){
    		Oldindex=0;
    	}

		gEvents &=~ evCheckCount_Event;
    }else if (gEvents & evFifoCheck_Event){   //Check Count

		sensor_mode=EnableMode_c;

        if(FifoHead!=FifoTail){
        	DBG_vPrintf(Debug, "FifoTail=%d\r\n",FifoTail);
    		printCmd(&Fifo_Data[FifoTail].data,Fifo_Data[FifoTail].len);   //Send RS485
    		CMD_Table_Index=Fifo_Data[FifoTail].Index;
    		FifoTail++;
    		Sensor485State=SendCMD;
    		if(FifoTail>=MaxSensorNumber){
    			FifoTail=0;
    		}
    		//sendEvent(evPolling_EnableEvent);   //for bug time stop
        }
		//DE RE BUG
    	vAHI_TimerEnable(E_AHI_TIMER_0, 7,FALSE, TRUE,FALSE);
    	vAHI_Timer0RegisterCallback(timer0Callback);
    	vAHI_TimerStartRepeat(E_AHI_TIMER_0, 0,100);

    	sendEvent(evPolling_EnableEvent);
		gEvents &=~ evFifoCheck_Event;
    }else if(gEvents & evReboot_Event){
    	vAHI_SwReset();
		gEvents &=~ evReboot_Event;
    }else if(gEvents & evTest_Event){
        uint8_t x=0;
        uint8_t y=0,z=0,Len=0;
        uint8 CMD_Number=0,EEGroup=0,EEArrGroup=0;
        uint16 ASCII=0;
        /*
        Temp=strtok(&cmdStr[2], "\r\n");

        DBG_vPrintf(Debug, "Temp=%s\r\n", Temp);

        Len=strlen(Temp);
        ASCII=(cmdStr[0]<<8)+cmdStr[1];
    	CMD_Number=convertASCII2Hex(&ASCII);
    	Len=Len-5;
    	DBG_vPrintf(Debug, "Len=%d CMD_Number=%d\r\n", Len,CMD_Number);
    	*/

/*
    	for(x=0;x<10;x++){
    		for(y=0;y<4;y++){
    			SensorEECMD_Table[x].sensorCmdTable_Num[y].sensorCmdLen=15;
    			for(z=0;z<15;z++){
    				SensorEECMD_Table[x].sensorCmdTable_Num[y].sensorCmd[z]=0+z+x;
            	    DBG_vPrintf(1, "SensorEECMD_Table[%d].sensorCmdTable_Num[%d].sensorCmd[%d]=%02x \r\n", x,y,z,SensorEECMD_Table[x].sensorCmdTable_Num[y].sensorCmd[z]);
    			}
    		}
    	}
    	*/

        /*
    	CMD_Number=7;
    	Len=15;

    	EEGroup=CMD_Number/4;
    	EEArrGroup=CMD_Number%4;

    	DBG_vPrintf(Debug, "Len=%d CMD_Number=%d\r\n", Len,CMD_Number);

        for(x=0;x<15;x++){
        	SensorEECMD_Table[EEGroup].sensorCmdTable_Num[EEArrGroup].sensorCmd[x]=x;
        }


        SensorEECMD_Table[EEGroup].sensorCmdTable_Num[EEArrGroup].sensorCmdLen=Len;

        DBG_vPrintf(Debug, "SensorCMD_Table.[EEGroup].Len=%d\r\n", SensorEECMD_Table[EEGroup].sensorCmdTable_Num[EEArrGroup].sensorCmdLen);

    	DBG_vPrintf(Debug, "sensorList CMD\r\n");
    	for(y=0;y<SensorEECMD_Table[EEGroup].sensorCmdTable_Num[EEArrGroup].sensorCmdLen;y++){
    		DBG_vPrintf(Debug, "%x", SensorEECMD_Table[EEGroup].sensorCmdTable_Num[EEArrGroup].sensorCmd[y]);
    	}

    	totalSegment = u16AHI_InitialiseEEP(&EEPROMDataLength);
    	iAHI_EraseEEPROMsegment(EEGroup+EEpromCMDTable+EEpromAddress);
    	iAHI_WriteDataIntoEEPROMsegment(EEGroup+EEpromCMDTable+EEpromAddress,0,&SensorEECMD_Table[EEGroup],64);
    	PSW_CMD_flag=FALSE;  //restart RS485 Loop
*/








    	//uint8_t x=0,y=0,z=0;


    	for(x=0;x<10;x++){
    		for(y=0;y<4;y++){
    			SensorEECMD_Table[x].sensorCmdTable_Num[y].sensorCmdLen=15;
    			for(z=0;z<15;z++){
    				SensorEECMD_Table[x].sensorCmdTable_Num[y].sensorCmd[z]=0+z+x;
            	    DBG_vPrintf(1, "SensorEECMD_Table[%d].sensorCmdTable_Num[%d].sensorCmd[%d]=%02x \r\n", x,y,z,SensorEECMD_Table[x].sensorCmdTable_Num[y].sensorCmd[z]);

    			}
    		}
    		totalSegment = u16AHI_InitialiseEEP(&EEPROMDataLength);
    		iAHI_EraseEEPROMsegment(x+EEpromCMDTable+EEpromAddress);
    		iAHI_WriteDataIntoEEPROMsegment(x+EEpromCMDTable+EEpromAddress,0,&SensorEECMD_Table[x],64);

    	}

		gEvents &=~ evTest_Event;
    }else if(gEvents & evCMDR_Event){
    	DBG_vPrintf(Debug, "evCMDR_Event\r\n");

    	uint8_t Ten_Value=0,One_Value=0;
    	uint8_t x=0,CMD_Count=0,z=0,y=0;
    	uint8 LsCMDTemp[50]={0};
    	uint8 Ls2Len=0;
    	uint8 CMD[4]={"CMDT"};

   // 	Ten_Value=CMDR_Index/4;
    //	One_Value=CMDR_Index%4;

    	//CMDR_Index
    	memcpy(LsCMDTemp,CMD,4);
    	switch(CMDR_Index){
			case 1:
				z=0;
				//Ten_Value+CMDR_Index;
				/*
				SensorEECMD_Table[0].sensorCmdTable_Num[0].sensorCmd   //2
				SensorEECMD_Table[0].sensorCmdTable_Num[1].sensorCmd
				SensorEECMD_Table[0].sensorCmdTable_Num[2].sensorCmd  //3
				SensorEECMD_Table[0].sensorCmdTable_Num[3].sensorCmd
				SensorEECMD_Table[1].sensorCmdTable_Num[0].sensorCmd
				*/
		    	for(x=0;x<5;x++){
		    		DBG_vPrintf(Debug, "x=%d\r\n",x);

		    		LsCMDTemp[4]=x+1;  //Count

					LsCMDTemp[5+CMD_Count]=x;   //Index

					if(x==4){
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[1].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[1].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[1].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}else{
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[0].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[0].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[0].sensorCmdTable_Num[z].sensorCmd[y];
						}

					}
					z++;

					if(z==4){
						z=0;
					}
					CMD_Count=CMD_Count+y+2;
		    	}

		       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
				LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
				Ls2Len=(4+CMD_Count+2)+1;

				/* RF pack*/
				au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
				memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
				LsRFlen=Ls2Len+8;

				sendEvent(evRfLs_SendRF_Event);

				break;
			case 2:
				z=1;
				//Ten_Value+CMDR_Index;
				/*
				SensorEECMD_Table[1].sensorCmdTable_Num[1].sensorCmd   //2
				SensorEECMD_Table[1].sensorCmdTable_Num[2].sensorCmd
				SensorEECMD_Table[1].sensorCmdTable_Num[3].sensorCmd  //3
				SensorEECMD_Table[2].sensorCmdTable_Num[0].sensorCmd
				SensorEECMD_Table[2].sensorCmdTable_Num[1].sensorCmd
				*/
		    	for(x=5;x<10;x++){
		    		DBG_vPrintf(Debug, "x=%d\r\n",x);

		    		LsCMDTemp[4]=x+1-5;  //Count

					LsCMDTemp[5+CMD_Count]=x;   //Index

					if(x==8){
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[2].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[2].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[2].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}else{
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[1].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[1].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[1].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}

					z++;

					if(z==4){
						z=0;
					}
					CMD_Count=CMD_Count+y+2;
		    	}

		       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
				LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
				Ls2Len=(4+CMD_Count+2)+1;

				/* RF pack*/
				au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
				memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
				LsRFlen=Ls2Len+8;

				sendEvent(evRfLs_SendRF_Event);

				break;
			case 3:
				z=2;
				//Ten_Value+CMDR_Index;
				/*
				SensorEECMD_Table[2].sensorCmdTable_Num[2].sensorCmd   //2
				SensorEECMD_Table[2].sensorCmdTable_Num[3].sensorCmd
				SensorEECMD_Table[3].sensorCmdTable_Num[0].sensorCmd  //3
				SensorEECMD_Table[3].sensorCmdTable_Num[1].sensorCmd
				SensorEECMD_Table[3].sensorCmdTable_Num[2].sensorCmd
				*/
		    	for(x=10;x<15;x++){
		    		DBG_vPrintf(Debug, "x=%d\r\n",x);

		    		LsCMDTemp[4]=x+1-10;  //Count

					LsCMDTemp[5+CMD_Count]=x;   //Index

					if(x==12){
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[3].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[3].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[3].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}else{
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[2].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[2].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[2].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}

					z++;

					if(z==4){
						z=0;
					}
					CMD_Count=CMD_Count+y+2;
		    	}

		       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
				LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
				Ls2Len=(4+CMD_Count+2)+1;

				/* RF pack*/
				au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
				memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
				LsRFlen=Ls2Len+8;

				sendEvent(evRfLs_SendRF_Event);

				break;

			case 4:
				z=3;
				//Ten_Value+CMDR_Index;
				/*
				SensorEECMD_Table[3].sensorCmdTable_Num[3].sensorCmd   //2
				SensorEECMD_Table[4].sensorCmdTable_Num[0].sensorCmd
				SensorEECMD_Table[4].sensorCmdTable_Num[1].sensorCmd  //3
				SensorEECMD_Table[4].sensorCmdTable_Num[2].sensorCmd
				SensorEECMD_Table[4].sensorCmdTable_Num[3].sensorCmd
				*/
		    	for(x=15;x<20;x++){
		    		DBG_vPrintf(Debug, "x=%d\r\n",x);

		    		LsCMDTemp[4]=x+1-15;  //Count

					LsCMDTemp[5+CMD_Count]=x;   //Index

					if(x==16){
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[4].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[4].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[4].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}else{
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[3].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[3].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[3].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}


					z++;

					if(z==4){
						z=0;
					}
					CMD_Count=CMD_Count+y+2;
		    	}

		       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
				LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
				Ls2Len=(4+CMD_Count+2)+1;

				/* RF pack*/
				au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
				memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
				LsRFlen=Ls2Len+8;

				sendEvent(evRfLs_SendRF_Event);

				break;

			case 5:
				z=0;
				//Ten_Value+CMDR_Index;
				/*
				SensorEECMD_Table[5].sensorCmdTable_Num[0].sensorCmd
				SensorEECMD_Table[5].sensorCmdTable_Num[1].sensorCmd
				SensorEECMD_Table[5].sensorCmdTable_Num[2].sensorCmd
				SensorEECMD_Table[5].sensorCmdTable_Num[3].sensorCmd
				SensorEECMD_Table[6].sensorCmdTable_Num[0].sensorCmd
				*/
		    	for(x=20;x<25;x++){
		    		DBG_vPrintf(Debug, "x=%d\r\n",x);

		    		LsCMDTemp[4]=x+1-20;  //Count

					LsCMDTemp[5+CMD_Count]=x;   //Index

					if(x==24){
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[6].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[6].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[6].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}else{
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[5].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[5].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[5].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}


					z++;

					if(z==4){
						z=0;
					}
					CMD_Count=CMD_Count+y+2;
		    	}

		       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
				LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
				Ls2Len=(4+CMD_Count+2)+1;

				/* RF pack*/
				au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
				memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
				LsRFlen=Ls2Len+8;

				sendEvent(evRfLs_SendRF_Event);

				break;

			case 6:
				z=1;
				//Ten_Value+CMDR_Index;
				/*
				SensorEECMD_Table[6].sensorCmdTable_Num[1].sensorCmd   //2
				SensorEECMD_Table[6].sensorCmdTable_Num[2].sensorCmd
				SensorEECMD_Table[6].sensorCmdTable_Num[3].sensorCmd  //3
				SensorEECMD_Table[7].sensorCmdTable_Num[0].sensorCmd
				SensorEECMD_Table[7].sensorCmdTable_Num[1].sensorCmd
				*/
		    	for(x=25;x<30;x++){
		    		DBG_vPrintf(Debug, "x=%d\r\n",x);

		    		LsCMDTemp[4]=x+1-25;  //Count

					LsCMDTemp[5+CMD_Count]=x;   //Index

					if(x==28){
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[7].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[7].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[7].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}else{
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[6].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[6].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[6].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}

					z++;

					if(z==4){
						z=0;
					}
					CMD_Count=CMD_Count+y+2;
		    	}

		       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
				LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
				Ls2Len=(4+CMD_Count+2)+1;

				/* RF pack*/
				au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
				memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
				LsRFlen=Ls2Len+8;

				sendEvent(evRfLs_SendRF_Event);

				break;

			case 7:
				z=2;
				//Ten_Value+CMDR_Index;
				/*
				SensorEECMD_Table[7].sensorCmdTable_Num[2].sensorCmd   //2
				SensorEECMD_Table[7].sensorCmdTable_Num[3].sensorCmd
				SensorEECMD_Table[8].sensorCmdTable_Num[0].sensorCmd  //3
				SensorEECMD_Table[8].sensorCmdTable_Num[1].sensorCmd
				SensorEECMD_Table[8].sensorCmdTable_Num[2].sensorCmd
				*/
		    	for(x=30;x<35;x++){
		    		DBG_vPrintf(Debug, "x=%d\r\n",x);

		    		LsCMDTemp[4]=x+1-30;  //Count

					LsCMDTemp[5+CMD_Count]=x;   //Index

					if(x==32){
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[8].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[8].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[8].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}else{
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[7].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[7].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[7].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}

					z++;

					if(z==4){
						z=0;
					}
					CMD_Count=CMD_Count+y+2;
		    	}

		       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
				LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
				Ls2Len=(4+CMD_Count+2)+1;

				/* RF pack*/
				au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
				memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
				LsRFlen=Ls2Len+8;

				sendEvent(evRfLs_SendRF_Event);

				break;

			case 8:
				z=3;
				//Ten_Value+CMDR_Index;
				/*
				SensorEECMD_Table[8].sensorCmdTable_Num[3].sensorCmd   //2
				SensorEECMD_Table[9].sensorCmdTable_Num[0].sensorCmd
				SensorEECMD_Table[9].sensorCmdTable_Num[1].sensorCmd  //3
				SensorEECMD_Table[9].sensorCmdTable_Num[2].sensorCmd
				SensorEECMD_Table[9].sensorCmdTable_Num[3].sensorCmd
				*/
		    	for(x=35;x<40;x++){
		    		DBG_vPrintf(Debug, "x=%d\r\n",x);

		    		LsCMDTemp[4]=x+1-35;  //Count

					LsCMDTemp[5+CMD_Count]=x;   //Index

					if(x==36){
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[9].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[9].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[9].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}else{
						LsCMDTemp[6+CMD_Count]=SensorEECMD_Table[8].sensorCmdTable_Num[z].sensorCmdLen;  //CMD LEN
						for(y=0;y<SensorEECMD_Table[8].sensorCmdTable_Num[z].sensorCmdLen;y++){
							LsCMDTemp[7+y+CMD_Count]=SensorEECMD_Table[8].sensorCmdTable_Num[z].sensorCmd[y];
						}
					}

					z++;

					if(z==4){
						z=0;
					}
					CMD_Count=CMD_Count+y+2;
		    	}

		       	LsCMDTemp[4+CMD_Count+1]=0x0d;   //0x0D
				LsCMDTemp[4+CMD_Count+2]=0x0a;  //0x0A
				Ls2Len=(4+CMD_Count+2)+1;

				/* RF pack*/
				au8CmdData[SEQ_POS] = WUART_u8MsgSeqTxNew();
				memcpy(&au8CmdData[8],LsCMDTemp,Ls2Len);
				LsRFlen=Ls2Len+8;

				sendEvent(evRfLs_SendRF_Event);

				break;
    	}

		gEvents &=~ evCMDR_Event;
    }













}

void sendEvent(uint16 event){
	gEvents |=event;
}
